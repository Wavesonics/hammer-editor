name: Build CI

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew buildDebug
      #      - name: Run Kover
      #        run: ./gradlew koverXmlReport
      #      - name: Upload coverage reports to Codecov
      #        uses: codecov/codecov-action@v4
      - name: Run Server Migration Tests
        run: ./gradlew :server:verifySqlDelightMigration
#  ios:
#    runs-on: macos-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: check Xcode version
#        run: /usr/bin/xcodebuild -version
#
#      - name: Get swift version
#        run: swift --version
#
#      - name: set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#          cache: gradle
#
#      - name: Grant execute permission for gradlew
#        run: chmod +x gradlew
#
#      - name: Install the Apple certificate and provisioning profile
#        env:
#          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
#          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
#          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
#          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
#        run: |
#          # create variables
#          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
#          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
#          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
#
#          # import certificate and provisioning profile from secrets
#          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o "$CERTIFICATE_PATH"
#          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o "$PP_PATH"
#
#          # create temporary keychain
#          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
#          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
#          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
#
#          # import certificate to keychain
#          security import "$CERTIFICATE_PATH" -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
#          security list-keychain -d user -s "$KEYCHAIN_PATH"
#
#          # apply provisioning profile
#          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#          cp "$PP_PATH" ~/Library/MobileDevice/Provisioning\ Profiles
#
#      - name: Set Default Scheme
#        run: |
#          cd ios
#          default="ios"
#          echo $default | cat >default
#          echo Using default scheme: $default
#
#      - name: Build
#        env:
#          scheme: ${{ 'default' }}
#          platform: ${{ 'iOS Simulator' }}
#        run: |
#          cd ios
#          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
#          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
#          if [ $scheme = default ]; then scheme=$(cat default); fi
#          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
#          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
#          xcodebuild build-for-testing -scheme "$scheme" -sdk iphoneos -allowProvisioningUpdates
